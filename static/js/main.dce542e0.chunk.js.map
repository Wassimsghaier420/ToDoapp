{"version":3,"sources":["AddTodo.js","actions.js","types.js","TodoItem.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","handleChange","event","setState","content","target","value","addNewTodo","props","addTodo","state","className","onChange","this","type","placeholder","onClick","Component","connect","dispatch","newTodo","id","uuid","TodoItem","disabled","todo","editTodo","e","deleteTodo","toggleTodo","style","border","textDecoration","completed","color","todoToEdit","todos","TodoReducer","map","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dce542e0.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { addTodo } from './actions';\r\n\r\nexport class AddTodo extends Component {  \r\n    handleChange = event => {\r\n        this.setState({ content: event.target.value });\r\n    }\r\n    addNewTodo = () => { \r\n        this.props.addTodo(this.state)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"add-todo\">\r\n                <input onChange={this.handleChange}\r\n                    type=\"text\"\r\n                    placeholder=\"Add your todo\"\r\n                    />\r\n                <input onClick={this.addNewTodo} type=\"button\" value=\"+\"/>\r\n                <createStore/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, {addTodo})(AddTodo)\r\n","import { ADD_TODO, DELETE_TODO, TOGGLE_TODO, EDIT_TODO } from './types'\r\nimport uuid from 'uuid'\r\n\r\nexport const addTodo = ({ content }) => dispatch => {\r\n    return(\r\n        dispatch({\r\n            type: ADD_TODO,\r\n            newTodo:{id: uuid(), content}\r\n        })\r\n    )\r\n}\r\n\r\nexport const deleteTodo = id => dispatch =>{\r\n    return(\r\n        dispatch({\r\n            type: DELETE_TODO,\r\n            id\r\n        })\r\n    )\r\n}\r\n\r\nexport const toggleTodo = id => dispatch =>{\r\n    return(\r\n        dispatch({\r\n            type: TOGGLE_TODO,\r\n            id\r\n        })\r\n    )\r\n}\r\n\r\nexport const editTodo = todoToEdit => dispatch => {\r\n    return(\r\n        dispatch({\r\n            type: EDIT_TODO,\r\n            todoToEdit\r\n        })\r\n    )\r\n}","export const ADD_TODO = 'ADD_TODO'\r\nexport const DELETE_TODO = 'DELETE_TODO'\r\nexport const TOGGLE_TODO = 'TOGGLE_TODO'\r\nexport const EDIT_TODO = 'EDIT_TODO'","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { deleteTodo, toggleTodo, editTodo } from './actions';\r\n\r\nexport class TodoItem extends Component {\r\n    state = { disabled: true, content: this.props.todo.content, id: this.props.todo.id }\r\n\r\n    editTodo = () => {\r\n        if(!this.state.disabled){\r\n            this.props.editTodo({...this.state, content: this.state.content})\r\n            this.setState({ disabled: !this.state.disabled });\r\n        }else{\r\n            this.setState({ disabled: !this.state.disabled });\r\n        }\r\n    }\r\n    handleChange = e => {\r\n        this.setState({ content: e.target.value });\r\n    }\r\n    render() {\r\n        const { todo, deleteTodo, toggleTodo } = this.props\r\n        return (\r\n            <div className=\"todo-row\">\r\n                <div className=\"todo-item\">\r\n                    <input type=\"checkbox\" onClick={() => toggleTodo(todo.id)}/>\r\n                    <input onChange={this.handleChange} disabled={this.state.disabled} style={{\r\n                        border: this.state.disabled ? 'none' : '1px solid black',\r\n                        textDecoration: todo.completed ? 'line-through' : 'none'\r\n                ,color: todo.completed ? 'grey' : 'white'}} id=\"todo-text\" type=\"text\" \r\n                value={this.state.content}/>\r\n                </div>\r\n                <div className=\"buttons\">\r\n                    <button onClick={this.editTodo} className=\"edit\"><i className=\"far fa-edit\"></i></button>\r\n                    <button onClick={() => deleteTodo(todo.id)} className=\"delete\"><i className=\"far fa-trash-alt\"></i></button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, {deleteTodo, toggleTodo, editTodo})(TodoItem)","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport TodoItem from './TodoItem';\r\n\r\nconst TodoList = ({todos}) => {\r\n    return (\r\n        <div className=\"todo-list\">\r\n            {todos.map((todo, index) => <TodoItem todo={todo} key={index}/>)}\r\n            \r\n            <createStore/>\r\n        </div>\r\n    )\r\n\t}\r\n\r\nconst mapStateToProps = state => {\r\n\treturn{\r\n\t\ttodos: state.TodoReducer\r\n\t}\r\n}\r\nexport default connect(mapStateToProps)(TodoList)","import React from 'react';\nimport AddTodo from './AddTodo';\nimport TodoList from './TodoList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1 className=\"app-title\">Daily Todo Lists</h1>\n       \n      </div>\n      <TodoList/>\n      <AddTodo />\n\n    </div>\n  );\n}\n\nexport default  App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}